import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score
import string

# Load the dataset
file_path = '/content/Restaurant_Reviews L.csv'
reviews_df = pd.read_csv(file_path)

# Split the data into training and test sets
X = reviews_df['Review']
y = reviews_df['Liked']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Custom preprocessing function
def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = ''.join([char for char in text if char not in string.punctuation])  # Remove punctuation
    return ' '.join(text.split())  # Split text into words and rejoin

# Create a pipeline that includes a count vectorizer and a Naive Bayes classifier
pipeline = make_pipeline(
    CountVectorizer(preprocessor=preprocess_text),
    MultinomialNB()
)

# Train the model
pipeline.fit(X_train, y_train)

# Evaluate the model
y_pred = pipeline.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Model Accuracy: {accuracy:.2f}')

# Function to predict based on user input
def predict_review(user_input):
    user_input_processed = preprocess_text(user_input)
    prediction = pipeline.predict([user_input_processed])
    return 'Positive' if prediction[0] == 1 else 'Negative'

# Prompt the user to input a review
user_review = input("Enter a review: ")
print(f'User Review Prediction: {predict_review(user_review)}')
